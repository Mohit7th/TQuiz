package mainGUI;

/**
 * @author Mohit Uniyal
 * This interface will provide facilities like configure text in which admin can add, test papers of all subjects
 * and can view the result, at any time
 * Date : 3-8-2015, 8:29pm
 * added table view content and handled most of the exception generated by the table
 * Date : 29-8-2015, 
 * added help tab data (done)
 * need to handle print button (done)
 */

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import dataEntry.Question;
import dataEntry.ReadXMLFile;
import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.print.PrinterJob;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.stage.Stage;

public class AdminSetting extends Application implements
		EventHandler<ActionEvent> {

	private final TableView<Result> resultTv = new TableView<>();
	private final ObservableList<Result> resultList = FXCollections
			.observableArrayList();

	static Button refreshBtn, printBtn;
	Stage globalStage;

	public AdminSetting() {
		refreshBtn = new Button("Refresh");
		printBtn = new Button("Print");
	}

	public static void uiLauncher(String[] args, Stage stg) {

		AdminSetting ad = new AdminSetting();
		try {
			ad.start(new Stage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		stg.close();
	}

	public void start(Stage settingStg) throws Exception {

		globalStage = settingStg;

		settingStg.setTitle("Admin - Settings");
		BorderPane root = new BorderPane();
		Scene tabScene = new Scene(root, 461, 438);

		// creating new tabs which will be displayed in the center of frame
		TabPane tabs = new TabPane();

		Tab subjectSelTab = new Tab("Configure Test");
		Tab resultTab = new Tab("View Result");
		Tab helpTab = new Tab("Help");

		// adding tabs to the tab pane
		tabs.getTabs().add(subjectSelTab);
		tabs.getTabs().add(resultTab);
		tabs.getTabs().add(helpTab);

		// removing default close button on the tabs
		subjectSelTab.setClosable(false);
		resultTab.setClosable(false);
		helpTab.setClosable(false);

		// adding tab pane to the the border layout
		root.setCenter(tabs);

		// adding components to the center tabs
		addToSubjectSelTab(subjectSelTab);
		addToResultTab(resultTab);
		addHelpTab(helpTab);

		// setting main display on the frame and displaying it
		settingStg.setResizable(false);
		settingStg.setScene(tabScene);
		settingStg.show();
	}

	@SuppressWarnings("unchecked")
	void addToResultTab(Tab resultTab) {
		// admin form in which he can select files and
		BorderPane rootBp = new BorderPane();
		resultTab.setContent(rootBp);

		// Adding buttons at the top to control the table that will generate
		// result
		HBox topHbox = new HBox(5);
		topHbox.setAlignment(Pos.CENTER_RIGHT);
		topHbox.setPadding(new Insets(10, 20, 10, 10));
		topHbox.getChildren().addAll(refreshBtn, printBtn);

		// Vbox for table
		VBox tableVbox = new VBox();

		// creating table column view table headers, and linking them to the
		// Result property class

		TableColumn<Result, ?> userIdTblcol = new TableColumn<>("User ID");
		userIdTblcol.setCellValueFactory(new PropertyValueFactory<>("userId"));

		TableColumn<Result, ?> courseTblcol = new TableColumn<>("Course");
		courseTblcol.setCellValueFactory(new PropertyValueFactory<>("course"));

		TableColumn<Result, ?> nameTblcol = new TableColumn<>("Name");
		nameTblcol.setCellValueFactory(new PropertyValueFactory<>("name"));

		TableColumn<Result, ?> marksTblcol = new TableColumn<>("Total Marks");
		marksTblcol.setCellValueFactory(new PropertyValueFactory<>("marks"));

		resultTv.setItems(resultList);

		// chnaging sorting order in the marks columns
		userIdTblcol.setSortable(false);
		courseTblcol.setSortable(false);
		nameTblcol.setSortable(false);

		// adding columns to the treeview
		resultTv.getColumns().addAll(userIdTblcol, marksTblcol);

		tableVbox.getChildren().add(resultTv);

		tableVbox.setPadding(new Insets(5, 20, 10, 20));

		// setting event on refresh button
		refreshBtn.setOnAction(this);
		printBtn.setOnAction(this);

		rootBp.setCenter(tableVbox);
		rootBp.setTop(topHbox);
	}

	public void buildData() {
		try {
			// retrieve result from student result table and store it in the
			// TableView
			Connection con = DriverManager.getConnection(
					"jdbc:mysql://localhost:3306/techquiz", "root", "");
			ResultSet resSet = con.createStatement().executeQuery(
					"select * from tblparticipents order by result desc");

			// empty result and display new values
			resultList.removeAll(resultList);

			// adding result table data from the database to the tableview
			while (resSet.next()) {
				resultList.add(new Result(resSet.getString(1), resSet
						.getString(3)));
			}

		} catch (Exception e) {
			HandleException.displayPrompt(HandleException.SERVER_OFFLINE);
			System.out.println("AdminSetting > buildData" + e);
		}
	}

	// list of subject displayed in the treeview
	static String[] subNames = { "java", "c sharp", "c language", "c++",
			"android", "html", "javascript", "css", "php", "dbms", "sql",
			"quant", "reasoning", "programming basic" };
	static Label[] chListArr = new Label[subNames.length];

	private void addToSubjectSelTab(Tab subjectSelTab) {
		// admin form in which he can view result and can refresh it
		BorderPane bp = new BorderPane();

		ObservableList<String> subNamesList = FXCollections
				.observableArrayList("B.C.A", "M.C.A", "B-tech", "M-tech",
						"BSC-IT", "MSC-IT", "BBA", "MBA");
		ComboBox<String> subNameComBox = new ComboBox<>(subNamesList);
		// default value for combobox
		subNameComBox.setValue("B.C.A");

		// creating a top box contains course name and no of user
		HBox centerTopHb = new HBox(21);

		centerTopHb.setAlignment(Pos.CENTER);
		centerTopHb.setPadding(new Insets(10, 20, 10, 10));

		TextField noOfUserTxtFld = new TextField();
		noOfUserTxtFld.setPromptText("30 (for 30min), 1(for 1hr)");
		// limiting user input to only numeric values

		restrictToNumInput(noOfUserTxtFld);

		centerTopHb.getChildren().addAll(new Label("Course"), subNameComBox,
				new Label("Time Duration"), noOfUserTxtFld);

		bp.setTop(centerTopHb);

		// creating a list box that allows multiple selection of checkboxes
		ObservableList<HBox> subNameList = FXCollections.observableArrayList();

		// creating a custom control with label, button and Textfield
		TextField subTimeTxtFld, subName;
		ToggleButton selSubFileTgBtn;
		for (int i=0;i <subNames.length; i++) {
			HBox customHb = new HBox(10);
			//chListArr[i] = new Label(subNames[i]);
			
			subName = new TextField(subNames[i]);
			subName.setId("subNameTxtfld"+i);
			//subName.setEditable(false);
			subName.setDisable(true);
			
			subTimeTxtFld = new TextField();
			subTimeTxtFld.setId("timeTxtFld" + i);
			subTimeTxtFld.setPromptText("Time (in min)");
			subTimeTxtFld.setPrefWidth(85);;
			
			// each textfield is only allowed to enter numeric values
			restrictToNumInput(subTimeTxtFld);

			selSubFileTgBtn = new ToggleButton("Select File");
			selSubFileTgBtn.setId("fileTgBtn" + i);

			// setting action listener for each button
			selSubFileTgBtn.setOnAction(this);

			customHb.getChildren()
					.addAll(subName, subTimeTxtFld, selSubFileTgBtn);

			//chListArr[i].setOnAction(this);
			subNameList.addAll(customHb);
		}
		ListView<HBox> subjectLv = new ListView<>(subNameList);

		subjectLv.setPrefSize(410, 280);

		HBox centerHb = new HBox(10);
		VBox listVb = new VBox(5);

		// button that will be used to provide fileSelection dialog
		HBox detailsHb = new HBox(10);
		Button browseBtn = new Button("Browse");
		Button saveBtn = new Button("Save");

		browseBtn.setOnAction(this);

		detailsHb.getChildren().addAll(new Label("Select files"), browseBtn);
		detailsHb.getChildren().addAll(new Label("Save to database"), saveBtn);
		detailsHb.setAlignment(Pos.CENTER_RIGHT);

		detailsHb.setPadding(new Insets(10, 0, 20, 20));

		saveBtn.setOnAction(this);

		centerHb.getChildren().addAll(listVb);
		centerHb.setPadding(new Insets(10, 20, 10, 20));
		centerHb.setAlignment(Pos.CENTER);

		listVb.getChildren().addAll(new Label("Select Subjects"), subjectLv,
				detailsHb);
		bp.setCenter(centerHb);
		subjectSelTab.setContent(bp);
	}

	// This method will restrict all textfield input to only numerical values
	private void restrictToNumInput(TextField tf) {
		tf.textProperty().addListener(new ChangeListener<String>() {

			public void changed(ObservableValue<? extends String> observable,
					String oldval, String newval) {
				// TODO Auto-generated method stub
				if (!newval.matches("\\d*")) {
					// checking for last entered character in the textbox
					tf.setText(oldval);
				}
			}
		});
	}


	public void handle(ActionEvent actEvent) {
		Object compObj = actEvent.getSource();
		if (compObj instanceof Button) {
			Button pressedBtn = (Button) compObj;
			String btnText = pressedBtn.getText();

			if (btnText.equals("Save")) {
				saveBtnPressed(pressedBtn);
			} else if (btnText.equals("Refresh")) {
				buildData();
			} else if (btnText.equals("Print")) {
				// hancdling printer, so that admin can print the result
				PrinterJob printer = PrinterJob.createPrinterJob();

				try {
					printer.showPrintDialog(globalStage);
					printer.printPage(resultTv);
				} catch (Exception e) {
					HandleException.displayPrompt(HandleException.NO_PRINTER);
				}

			}
		} else if (compObj instanceof ToggleButton) {
			ToggleButton pressedBtn = (ToggleButton) compObj;
			browseBtnPressed(pressedBtn);
		}
	}

	private void saveBtnPressed(Button pressedBtn) {
		if (allTestFilePath[0] != null) {
			
			//for(int i=0; i<fileCtr; i++){
				//if(())
			//}
			
			for (int i = 0; i < fileCtr; i++) {
				if (allTestFilePath[i] != null) {
					try {
						ArrayList<Question> questionlist = new ReadXMLFile(
								allTestFilePath[i]).getQuestionList();
						DbConnection.addToQuestionTbl(questionlist,
								allTestName[i]);
					} catch (ParserConfigurationException | IOException
							| SAXException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					System.out.println(allTestFilePath[i]);
				} else {
					break;
				}
			}
		} else
			HandleException.displayPrompt(HandleException.NO_FILE_SELECTED);
	}

	private String allTestFilePath[], allTestName[];
	private int fileCtr; 
//	private TextField textFieldUsed[];
	{
		fileCtr = 0;
	//	textFieldUsed = new TextField[14];
		allTestFilePath = new String[14];
		allTestName = new String[14];
	}

	private void browseBtnPressed(ToggleButton pressedBtn) {
		// TODO Auto-generated method stub
		FileChooser fileDialog = new FileChooser();
		fileDialog.setTitle("Select all xml test Files");

		// allowing only xml file selection in the dialog
		ExtensionFilter exFilter = new ExtensionFilter("XML filter", "*.xml");
		fileDialog.getExtensionFilters().addAll(exFilter);

		// getting selected file inside the list interface
		File file = fileDialog.showOpenDialog(globalStage);

		// getFile path so that they can be read and their content can
		// be saved to the database

		if (file != null) {
			allTestFilePath[fileCtr] = new String();
			allTestFilePath[fileCtr] = file.getAbsolutePath();

			String btnId = pressedBtn.getId();
			String btnNo = btnId.substring(9, btnId.length());
			
			
			allTestName[fileCtr] = subNames[Integer.parseInt(btnNo)];
			System.out.println(allTestName[fileCtr++]);

			System.out.println(file.getAbsolutePath());
		}
	}

	// this method will provide 'how to use' information about previous tabs
	private void addHelpTab(Tab helpTab) {
		BorderPane bp = new BorderPane();
		helpTab.setContent(bp);

		TextArea helpTxtArea = new TextArea(
				"Configure Test Tab\n1 : Select Course\n2 : Enter number of student participating in the test"
						+ "\n3 : Select subjects for different test\n4 : Select multiple xml files by clicking on browse button\n"
						+ "5 : Click on the save button"
						+ "\n\nView Result Tab\n1 : Press Refresh to update the result list"
						+ "\n2 : Result can be sorted by clicking Sort button\n3 : Print the result by clicking print button");

		helpTxtArea.setPadding(new Insets(10, 10, 10, 10));

		helpTxtArea.setEditable(false);
		helpTxtArea.setWrapText(true);
		helpTxtArea
				.setStyle("-fx-background-color: green; -fx-font-color : red;");

		HBox wrapLblHbx = new HBox();
		Label helpLbl = new Label("Instruction to use this appliaction");
		wrapLblHbx.getChildren().add(helpLbl);

		wrapLblHbx.setAlignment(Pos.CENTER);

		helpLbl.setPadding(new Insets(10, 10, 10, 10));

		bp.setTop(wrapLblHbx);
		bp.setCenter(helpTxtArea);
	}

}
